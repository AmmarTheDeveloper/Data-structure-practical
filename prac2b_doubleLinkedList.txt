#include <iostream>
using namespace std;

// Node structure for a doubly linked list
struct Node {
    int data;
    Node* prev;
    Node* next;
};

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the doubly linked list
void insertNode(Node*& head, int data) {
    Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
}

// Function to sort the doubly linked list using bubble sort
void sortList(Node* head) {
    if (head == NULL) {
        return;
    }

    bool swapped;
    Node* current;
    Node* last = NULL;

    do {
        swapped = false;
        current = head;

        while (current->next != last) {
            if (current->data > current->next->data) {
                // Swap data
                int temp = current->data;
                current->data = current->next->data;
                current->next->data = temp;
                swapped = true;
            }
            current = current->next;
        }
        last = current;
    } while (swapped);
}

// Function to display the doubly linked list
void displayList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = NULL;
    int n, data;

    // Input the number of nodes
    cout << "Enter the number of nodes: ";
    cin >> n;

    // Input node elements and create the doubly linked list
    for (int i = 0; i < n; ++i) {
        cout << "Enter element " << i + 1 << ": ";
        cin >> data;
        insertNode(head, data);
    }

    // Display the list before sorting
    cout << "Doubly linked list before sorting: ";
    displayList(head);

    // Sort the doubly linked list
    sortList(head);

    // Display the list after sorting
    cout << "Doubly linked list after sorting: ";
    displayList(head);

    return 0;
}

#include <iostream>
#include <stack>
#include <algorithm>
using namespace std;

// Function to check if a character is an operator
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

// Function to return the precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

// Function to perform infix to postfix conversion
string infixToPostfix(string expression) {
    stack<char> stack;
    string result;

    for (int i = 0; i < expression.length(); i++) {
        char c = expression[i];

        // If the character is an operand, add it to the result
        if (isalnum(c)) {
            result += c;
        }
        // If the character is an '(', push it to the stack
        else if (c == '(') {
            stack.push(c);
        }
        // If the character is a ')', pop from the stack until '(' is encountered
        else if (c == ')') {
            while (!stack.empty() && stack.top() != '(') {
                result += stack.top();
                stack.pop();
            }
            stack.pop();  // Remove '(' from the stack
        }
        // If the character is an operator
        else if (isOperator(c)) {
            while (!stack.empty() && precedence(c) <= precedence(stack.top())) {
                result += stack.top();
                stack.pop();
            }
            stack.push(c);
        }
    }

    // Pop all the remaining operators from the stack
    while (!stack.empty()) {
        result += stack.top();
        stack.pop();
    }

    return result;
}

// Function to perform infix to prefix conversion
string infixToPrefix(string expression) {
    // Reverse the infix expression
    reverse(expression.begin(), expression.end());

    // Replace '(' with ')' and vice versa
    for (int i = 0; i < expression.length(); i++) {
        if (expression[i] == '(') {
            expression[i] = ')';
        }
        else if (expression[i] == ')') {
            expression[i] = '(';
        }
    }

    // Convert the reversed infix expression to postfix
    string postfix = infixToPostfix(expression);

    // Reverse the postfix expression to get the prefix expression
    reverse(postfix.begin(), postfix.end());

    return postfix;
}

int main() {
    string infixExpression;
    cout << "Enter an infix expression: ";
    cin >> infixExpression;

    string postfix = infixToPostfix(infixExpression);
    string prefix = infixToPrefix(infixExpression);

    cout << "Postfix Expression: " << postfix << endl;
    cout << "Prefix Expression: " << prefix << endl;

    return 0;
}

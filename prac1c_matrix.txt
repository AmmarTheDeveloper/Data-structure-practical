#include <iostream>
using namespace std;

// Function to add two matrices
void addMatrices(int rows, int cols, int mat1[10][10], int mat2[10][10], int result[10][10]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = mat1[i][j] + mat2[i][j];
        }
    }
}

// Function to multiply two matrices
void multiplyMatrices(int rows1, int cols1, int mat1[10][10], int rows2, int cols2, int mat2[10][10], int result[10][10]) {
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            result[i][j] = 0; // Initialize the result matrix
            for (int k = 0; k < cols1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }
}

// Function to find the transpose of a matrix
void transposeMatrix(int rows, int cols, int mat[10][10], int result[10][10]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[j][i] = mat[i][j];
        }
    }
}

// Function to display a matrix
void displayMatrix(int rows, int cols, int mat[10][10]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << mat[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int rows1, cols1, rows2, cols2;
    int mat1[10][10], mat2[10][10], result[10][10];

    // Input dimensions for the first matrix
    cout << "Enter rows and columns for the first matrix: ";
    cin >> rows1 >> cols1;

    // Input elements for the first matrix
    cout << "Enter elements of the first matrix:\n";
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols1; j++) {
            cin >> mat1[i][j];
        }
    }

    // Input dimensions for the second matrix
    cout << "Enter rows and columns for the second matrix: ";
    cin >> rows2 >> cols2;

    // Input elements for the second matrix
    cout << "Enter elements of the second matrix:\n";
    for (int i = 0; i < rows2; i++) {
        for (int j = 0; j < cols2; j++) {
            cin >> mat2[i][j];
        }
    }

    // Perform addition if matrices are of the same size
    if (rows1 == rows2 && cols1 == cols2) {
        addMatrices(rows1, cols1, mat1, mat2, result);
        cout << "Matrix Addition:\n";
        displayMatrix(rows1, cols1, result);
    } else {
        cout << "Matrix addition not possible (matrices have different dimensions).\n";
    }

    // Perform multiplication if the number of columns in the first matrix equals the number of rows in the second matrix
    if (cols1 == rows2) {
        multiplyMatrices(rows1, cols1, mat1, rows2, cols2, mat2, result);
        cout << "Matrix Multiplication:\n";
        displayMatrix(rows1, cols2, result);
    } else {
        cout << "Matrix multiplication not possible (columns of the first matrix do not match rows of the second matrix).\n";
    }

    // Transpose of the first matrix
    transposeMatrix(rows1, cols1, mat1, result);
    cout << "Transpose of the First Matrix:\n";
    displayMatrix(cols1, rows1, result);

    // Transpose of the second matrix
    transposeMatrix(rows2, cols2, mat2, result);
    cout << "Transpose of the Second Matrix:\n";
    displayMatrix(cols2, rows2, result);

    return 0;
}

#include <iostream>
using namespace std;

#define MAX 100  // Maximum size of the stack

class Stack {
    int top;
    int arr[MAX];

public:
    Stack() {
        top = -1;  // Initialize stack as empty
    }

    // Function to push an element onto the stack
    void push(int data) {
        if (top >= (MAX - 1)) {
            cout << "Stack Overflow" << endl;
        } else {
            arr[++top] = data;
            cout << data << " pushed onto stack" << endl;
        }
    }

    // Function to pop an element from the stack
    void pop() {
        if (top < 0) {
            cout << "Stack Underflow" << endl;
        } else {
            int data = arr[top--];
            cout << data << " popped from stack" << endl;
        }
    }

    // Function to display all elements in the stack
    void display() {
        if (top < 0) {
            cout << "Stack is empty" << endl;
        } else {
            cout << "Stack elements: ";
            for (int i = top; i >= 0; i--) {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    }

    // Function to check if the stack is empty
    bool isEmpty() {
        return (top < 0);
    }
};

int main() {
    Stack stack;
    int choice, value;

    do {
        cout << "\nStack Operations:\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Display\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to push: ";
            cin >> value;
            stack.push(value);
            break;
        case 2:
            stack.pop();
            break;
        case 3:
            stack.display();
            break;
        case 4:
            cout << "Exiting..." << endl;
            break;
        default:
            cout << "Invalid choice, please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}
